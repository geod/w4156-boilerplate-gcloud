version: 2
jobs:
  build:
    working_directory: ~/gennyc
    docker:
      - image: google/cloud-sdk
      - image: circleci/python:2.7
    environment:
      - PYTHONPATH: /usr/lib/google-cloud-sdk/platform/google_appengine
    steps:
      - checkout

      - restore_cache:
          keys:
            - venv-{{ checksum "requirements.txt" }}
            - venv- # used if checksum fails

      - run:
          name: PATH update
          command: |
            echo "export PATH=/usr/lib/google-cloud-sdk/platform/google_appengine:$PATH" >> $BASH_ENV
            echo "export PYTHONPATH=/usr/lib/google-cloud-sdk/platform/google_appengine:~/google_appengine:~/google_appengine/lib/yaml/:$PYTHONPATH" >> $BASH_ENV
            cat $BASH_ENV

      - run:
          name: Install Dependencies
          command: |
            echo $PYTHONPATH
            apt install -y unzip libmysqlclient-dev google-cloud-sdk-app-engine-python
            apt-get install google-cloud-sdk-app-engine-python-extras

            pip install virtualenv
            virtualenv venv
            . venv/bin/activate

            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                echo $CLIENT_SECRET_UAT | base64 -d > ~/client-secret.json
            else
                echo $CLIENT_SECRET_DEV | base64 -d > ~/client-secret.json
            fi

            mkdir -p lib/
            pip install -r requirements.txt -t lib/
            pip install -r requirements.txt
            gcloud auth activate-service-account --key-file ~/client-secret.json

            if [ "${CIRCLE_BRANCH}" == "master" ]; then
                gcloud config set project $GCLOUD_PROJECT_ID_UAT
            else
                gcloud config set project $GCLOUD_PROJECT_ID_DEV
            fi

      - run:
          name: tests
          command: |
            . venv/bin/activate
            python tests/test_main.py

      - save_cache:
          key: venv-{{ checksum "requirements.txt" }}
          paths: "venv"

  deploy-dev:
    docker:
      - image: google/cloud-sdk
      - image: circleci/python:2.7
    working_directory: ~/gennyc
    steps:
      - checkout

      - restore_cache:
          keys:
          - deploy-dep-{{ checksum "requirements.txt" }}
          - deploy-dep-
      - run:
          name: Install dependencies
          command: |
            echo $PYTHONPATH
            apt install -y unzip libmysqlclient-dev google-cloud-sdk-app-engine-python
            apt-get install google-cloud-sdk-app-engine-python-extras

            pip install virtualenv
            virtualenv venv
            . venv/bin/activate

            mkdir -p lib/
            pip install -t lib/ -r requirements.txt
            pip install -r requirements.txt
      - save_cache:
          key: deploy-dep-{{ checksum "requirements.txt" }}
          paths:
            - ./venv
      - run:
          name: Authenticate DEV with Google Cloud
          command: |
            echo $CLIENT_SECRET_DEV | base64 -d > ~/client-secret.json
            gcloud config set project $GCLOUD_PROJECT_ID_DEV
            gcloud auth activate-service-account --key-file=../client-secret.json
      - run:
          name: Print Google Cloud settings
          command: |
            gcloud auth list
            gcloud config list
      - run:
          name: Deploy app to DEV Google App Engine
          command: |
            gcloud config set project $GCLOUD_PROJECT_ID_DEV
            gcloud -q app deploy cron.yaml app.yaml --promote --version=1

  deploy-uat:
    docker:
      - image: google/cloud-sdk
      - image: circleci/python:2.7
    working_directory: ~/gennyc
    steps:
      - checkout

      - restore_cache:
          keys:
            - deploy-dep-{{ checksum "requirements.txt" }}
            - deploy-dep-

      - run:
          name: Install dependencies
          command: |
            apt install -y unzip libmysqlclient-dev google-cloud-sdk-app-engine-python
            apt-get install google-cloud-sdk-app-engine-python-extras

            pip install virtualenv
            virtualenv venv
            . venv/bin/activate

            mkdir -p lib/
            pip install -t lib/ -r requirements.txt
            pip install -r requirements.txt

      - save_cache:
          key: deploy-dep-{{ checksum "requirements.txt" }}
          paths:
            - ./venv
      - run:
          name: Authenticate UAT with Google Cloud
          command: |
            echo $CLIENT_SECRET_UAT | base64 -d > ~/client-secret.json
            gcloud config set project $GCLOUD_PROJECT_ID_UAT
            gcloud auth activate-service-account --key-file=../client-secret.json
      - run:
          name: Deploy app to UAT Google App Engine
          command: |
            gcloud config set project $GCLOUD_PROJECT_ID_UAT
            gcloud -q app deploy app.yaml --promote --version=1

  deploy-prod:
    docker:
      - image: google/cloud-sdk
      - image: circleci/python:2.7
    working_directory: ~/gennyc
    steps:
      - checkout

      - restore_cache:
          keys:
            - deploy-dep-{{ checksum "requirements.txt" }}
            - deploy-dep-

      - run:
          name: Install dependencies
          command: |
            apt install -y unzip libmysqlclient-dev google-cloud-sdk-app-engine-python
            apt-get install google-cloud-sdk-app-engine-python-extras

            pip install virtualenv
            virtualenv venv
            . venv/bin/activate

            mkdir -p lib/
            pip install -t lib/ -r requirements.txt
            pip install -r requirements.txt

      - save_cache:
          key: deploy-dep-{{ checksum "requirements.txt" }}
          paths:
            - ./venv

      - run:
          name: Authenticate with PRODUCTION Google Cloud
          command: |
            echo $CLIENT_SECRET_PROD | base64 -d > ~/client-secret.json
            gcloud config set project $GCLOUD_PROJECT_ID_PROD
            gcloud auth activate-service-account --key-file=../client-secret.json

      - run:
          name: Deploy app to PRODUCTION Google App Engine
          command: |
            gcloud config set project $GCLOUD_PROJECT_ID_PROD
            gcloud -q app deploy app.yaml --promote --version=1

workflows:
  version: 2
  build-and-deploy:
    jobs:
      - build
      - deploy-dev:
          requires:
            - build
          filters:
            branches:
              only:
                - development
      - deploy-uat:
          requires:
            - build
          filters:
            branches:
              only:
                - master
      - hold-prod:
          type: approval
          requires:
            - deploy-uat
      - deploy-prod:
          requires:
            - hold-prod
